version: '3.8'

services:
  # Base de données PostgreSQL
  db:
    image: postgres:15-alpine
    container_name: base_app_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: base_app
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - base_app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis pour cache et queues
  redis:
    image: redis:7-alpine
    container_name: base_app_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - base_app_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Backend Node.js/Express
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: base_app_backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 8000
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: base_app
      DB_USER: postgres
      DB_PASSWORD: postgres
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      JWT_SECRET: votre-clé-secrète-très-sécurisée-changez-la-en-production
      CORS_ORIGIN: http://localhost:3000,http://frontend:3000
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - base_app_network
    volumes:
      - ./backend:/app
      - /app/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Worker Bull pour les tâches asynchrones
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: base_app_worker
    restart: unless-stopped
    command: node src/jobs/worker.js
    environment:
      NODE_ENV: production
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: base_app
      DB_USER: postgres
      DB_PASSWORD: postgres
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - base_app_network
    volumes:
      - ./backend:/app
      - /app/node_modules

  # Frontend Next.js
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: base_app_frontend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://localhost:8000
      NEXT_PUBLIC_SOCKET_URL: http://localhost:8000
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - base_app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Reverse Proxy Traefik
  traefik:
    image: traefik:v3.0
    container_name: base_app_traefik
    restart: unless-stopped
    command:
      - --api.dashboard=true
      - --api.debug=true
      - --log.level=INFO
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencrypt.acme.email=admin@example.com
      - --certificatesresolvers.letsencrypt.acme.storage=/acme.json
      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Dashboard Traefik
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_data:/acme.json
    networks:
      - base_app_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.traefik.service=api@internal"

  # Monitoring avec Adminer (optionnel)
  adminer:
    image: adminer:latest
    container_name: base_app_adminer
    restart: unless-stopped
    ports:
      - "8081:8080"
    depends_on:
      - db
    networks:
      - base_app_network
    environment:
      ADMINER_DEFAULT_SERVER: db

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  traefik_data:
    driver: local

networks:
  base_app_network:
    driver: bridge